Step 1 Trimming and fastqc:
========================================
In pipeline within subscript:
  fastqc_on_R1_R2_and_optional_trimming.sh \
  -T /hdd1/programs_for_pilot/Trimmomatic-0.39/trimmomatic-0.39.jar \
  -1 $forward_reads -2 $reverse_reads -t yes -p $threads

In subscript fastqc_on_R1_R2_and_optional_trimming.sh:
  Trimmomatic:
    java -jar /hdd1/programs_for_pilot/Trimmomatic-0.39/trimmomatic-0.39.jar\
    PE $R1 $R2 ILLUMINACLIP:/hdd1/programs_for_pilot/Trimmomatic-0.39/adapters/TruSeq3-PE.fa:2:30:10 LEADING:$score TRAILING:$score SLIDINGWINDOW:4:$score MINLEN:$min_length \
    -threads $threads
  Fastqc:
    fastqc $R1

Step 1 also includes error correction using SPAdes:
  spades.py -1 $trimming_results/*1P.fastq -2 $trimming_results/*2P.fastq \
  --only-error-correction --disable-gzip-output -o $trimming_results/error_correction \
  -t $threads

========================================
Step 2 rRNA sorting:
========================================
SortMeRNA:
  sortmerna --ref /hdd2/databases/sortmerna_silva_databases/silva-bac-16s-id90.fasta \
  --ref /hdd2/databases/sortmerna_silva_databases/silva-arc-16s-id95.fasta \
  --ref /hdd2/databases/sortmerna_silva_databases/silva-euk-18s-id95.fasta \
  --reads ../*1P_error_corrected.fastq --reads ../*2P_error_corrected.fastq \
  --paired_in --out2 -other -fastx 1 -num_alignments 1 -v -workdir SORTMERNA/ \
  --threads 1:1:$threads

rRNAFilter:
  java -jar -Xmx7g /hdd1/programs_for_pilot/rRNAFilter_commandline.jar \
  -i ../../reads_in_fasta_format/R1.fa -r 0

barrnap:
  barrnap --quiet --lencutoff 0.000001 --reject 0.000001 --kingdom euk \
  --threads $threads --outseq BARRNAP/euk_reads1.fa \
  reads_in_fasta_format/R1.fa

========================================
Step 3 assembly:
========================================
SPAdes:
  spades.py -1 ../../$R1_sorted -2 ../../$R2_sorted --only-assembler \
  -o SPADES/ -t $threads

metaSPAdes:
  spades.py --meta -1 ../../$R1_sorted -2 ../../$R2_sorted --only-assembler \
  -o METASPADES/ -t $threads

MEGAHIT:
  megahit --presets meta-large -t $threads -1 ../../$R1_sorted \
  -2 ../../$R2_sorted -o MEGAHIT/

IDBA-UD:
  idba_ud --num_threads $threads -r idba_ud_input.fa -o IDBA_UD/

rnaSPAdes:
  spades.py --rna -1 ../../$R1_sorted -2 ../../$R2_sorted --only-assembler \
  -o RNASPADES/ -t $threads

IDBA-tran:
  idba_tran --num_threads $threads -l idba_tran_input.fa -o IDBA_TRAN/

Trinity:
  Trinity --seqType fq --max_memory 124G --left ../../$R1_sorted --right \
  ../../$R2_sorted --CPU $threads --output TRINITY/

transABySS:
  transabyss --pe ../../$R1_sorted ../../$R2_sorted --threads $threads \
  --outdir TRANSABYSS/


========================================
Step 4 read mapping:
========================================
BWA:
  bwa index -p bwa_index ../../../$scaffolds
  bwa mem -t $threads bwa_index ../../../../../../*1P_error_corrected.fastq \
  ../../../../../../*2P_error_corrected.fastq > bwa_output.sam

Bowtie2:
  bowtie2-build -f ../../../$scaffolds bowtie_index
  bowtie2 -q -x bowtie_index -1 ../../../../../../*1P_error_corrected.fastq \
  -2 ../../../../../../*2P_error_corrected.fastq -S bowtie2_output.sam \
  -p $threads

=========================================
Step 5 and 6 database and classification
(here only at the example of DB NCBI-NT):
=========================================
BLAST:
  blastn -query ../../../../$scaffolds \
  -db /hdd2/databases/nt_database_feb_2020_indexed/nt -out blast_output.txt \
  -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore staxids" \
  -evalue 1e-05 -num_threads $threads

Kraken2:
  kraken2 --db /hdd2/databases/kraken2_nt_DB --threads $threads \
  --report kraken2_report.txt../../../../../$scaffolds > kraken2_output.txt
